[{"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\index.js":"1","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\reportWebVitals.js":"2","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\App.js":"3","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\Main.js":"4","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Home.js":"5","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Signin.js":"6","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Splash.js":"7","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Signup.js":"8","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\PayoutSetupCallback.js":"9","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\PasswordReset.js":"10","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\Models.js":"11","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\Navbar.js":"12","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\SearchLocationInput.js":"13","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\PayoutSetup.js":"14","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Dashboard.js":"15","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\helpers\\Api.js":"16","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Customers.js":"17","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Orders.js":"18","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\listItems.js":"19","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Businesses.js":"20","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\HomeSplash.js":"21","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Title.js":"22","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Chart.js":"23","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Sales.js":"24"},{"size":663,"mtime":1615229785187,"results":"25","hashOfConfig":"26"},{"size":375,"mtime":1615229785203,"results":"27","hashOfConfig":"26"},{"size":155,"mtime":1615229785179,"results":"28","hashOfConfig":"26"},{"size":1062,"mtime":1615229785179,"results":"29","hashOfConfig":"26"},{"size":1233,"mtime":1615766886084,"results":"30","hashOfConfig":"26"},{"size":4268,"mtime":1615817457842,"results":"31","hashOfConfig":"26"},{"size":5980,"mtime":1615767348956,"results":"32","hashOfConfig":"26"},{"size":26203,"mtime":1615767334829,"results":"33","hashOfConfig":"26"},{"size":434,"mtime":1615229785195,"results":"34","hashOfConfig":"26"},{"size":4287,"mtime":1615766898641,"results":"35","hashOfConfig":"26"},{"size":12941,"mtime":1615767147135,"results":"36","hashOfConfig":"26"},{"size":2095,"mtime":1615767161805,"results":"37","hashOfConfig":"26"},{"size":1863,"mtime":1615229785187,"results":"38","hashOfConfig":"26"},{"size":3678,"mtime":1615766963962,"results":"39","hashOfConfig":"26"},{"size":6850,"mtime":1615766799636,"results":"40","hashOfConfig":"26"},{"size":3621,"mtime":1615766684619,"results":"41","hashOfConfig":"26"},{"size":3959,"mtime":1615817223517,"results":"42","hashOfConfig":"26"},{"size":5353,"mtime":1615817433709,"results":"43","hashOfConfig":"26"},{"size":2756,"mtime":1615229785203,"results":"44","hashOfConfig":"26"},{"size":4102,"mtime":1615817225083,"results":"45","hashOfConfig":"26"},{"size":571,"mtime":1615766809684,"results":"46","hashOfConfig":"26"},{"size":358,"mtime":1615229785203,"results":"47","hashOfConfig":"26"},{"size":18435,"mtime":1615817222440,"results":"48","hashOfConfig":"26"},{"size":498,"mtime":1615817373948,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"310x4g",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\index.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\reportWebVitals.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\App.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\Main.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Home.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Signin.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Splash.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\Signup.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\PayoutSetupCallback.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\PasswordReset.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\Models.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\Navbar.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\SearchLocationInput.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\PayoutSetup.js",["102"],"import React, { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport API from \"../helpers/Api.js\";\r\nimport bankIcon from \"../static/icon-bank.svg\";\r\nimport { Business, setLocalStorage } from \"../Models.js\";\r\n\r\nconst PayoutSetup = (props) => {\r\n  const [redirect, setRedirect] = useState(null);\r\n  var redirectUrl = null;\r\n  const getRedirectInfo = async () => {\r\n    return API.makeRequest(\"GET\", `/create-stripe-account`);\r\n  };\r\n  const onSubmit = async (event, merchantStripeId) => {\r\n    event.preventDefault();\r\n    if (localStorage.getItem(\"business\")) {\r\n      const currentBusiness = new Business(\r\n        localStorage.getItem(\"business\"),\r\n        true\r\n      );\r\n      setLocalStorage(\"business\", currentBusiness);\r\n\r\n      const dataObject = { business: currentBusiness };\r\n      let result = await API.makeRequest(\r\n        \"POST\",\r\n        \"/signup-redirect\",\r\n        dataObject,\r\n        false\r\n      );\r\n      return true;\r\n    } else {\r\n      console.log(\"No user business found\");\r\n    }\r\n  };\r\n  const handleConnect = async () => {\r\n    let responseBody = await getRedirectInfo();\r\n    const merchantStripeId = responseBody.stripe_id;\r\n    let url = responseBody.url;\r\n    if (url && merchantStripeId) {\r\n      redirectUrl = url;\r\n      return merchantStripeId;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    //had to do this because memory leak due to component not unmounting properly\r\n    let mount = true;\r\n    if (mount && redirect) {\r\n      window.location.assign(redirect);\r\n    }\r\n\r\n    return () => (mount = false);\r\n  }, [redirect]);\r\n\r\n  if (props.callback) {\r\n    return (\r\n      <>\r\n        <div className=\"text-center box\">\r\n          <img src={bankIcon} alt=\"\" className=\"icon\" />\r\n          <h5 style={{ marginTop: \"5%\", marginBottom: \"5%\" }}>\r\n            Stripe account onboarding incomplete\r\n          </h5>\r\n          <p>\r\n            Please click the button below to be redirected to Stripe to complete\r\n            the onboarding proces\r\n          </p>\r\n\r\n          <Button\r\n            className=\"btn btn-primary text-center\"\r\n            onClick={(event) => {\r\n              // if this is the payout redirect then all values for business and merchant have been set in the backend and we dont need to propogate back upwards\r\n              handleConnect().then((merchantStripeId) =>\r\n                onSubmit(event, merchantStripeId).then((result) => {\r\n                  // setRedirect(redirectUrl);\r\n                })\r\n              );\r\n            }}\r\n          >\r\n            Set up payouts\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <div className=\"text-center box\">\r\n          <div className=\"fs-title\">\r\n            Input your bank account to recieve payouts\r\n          </div>\r\n          <img src={bankIcon} alt=\"\" className=\"icon\" />\r\n\r\n          <p>\r\n            QuickBev partners with Stripe to transfer earnings to your bank\r\n            account.\r\n          </p>\r\n\r\n          <Button\r\n            className=\"btn btn-primary text-center\"\r\n            onClick={(event) => {\r\n              handleConnect().then((merchantStripeId) =>\r\n                props\r\n                  .onSubmit(event, merchantStripeId, false)\r\n                  .then((result) => {\r\n                    setRedirect(redirectUrl);\r\n                  })\r\n              );\r\n            }}\r\n          >\r\n            Set up payouts\r\n          </Button>\r\n\r\n          <p className=\"text-center notice\">\r\n            You'll be redirected to Stripe to complete the onboarding proces.\r\n          </p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default PayoutSetup;\r\n","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Dashboard.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\helpers\\Api.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Customers.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Orders.js",["103","104","105"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Title from \"./Title\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { Order, OrderDrink } from \"../../Models\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    width: \"100%\",\r\n  },\r\n});\r\nconst capitalize = (word) => {\r\n  return word.charAt(0).toUpperCase() + word.substring(1);\r\n};\r\nconst toCapitalizedWords = (name) => {\r\n  var words = name.match(/[A-Za-z][a-z]*/g) || [];\r\n\r\n  return words.map(capitalize).join(\" \");\r\n};\r\nconst Orders = (props) => {\r\n  const classes = useStyles();\r\n  const mappedOrders = props.orders.map((orderJSON) => {\r\n    return new Order(orderJSON);\r\n  });\r\n  const formattedMappedOrders = mappedOrders.map((order) => {\r\n    order.cost = Math.round(order.cost);\r\n    order.subtotal = Math.round(order.subtotal);\r\n    order.tipAmount = Math.round(order.tipAmount);\r\n    order.salesTax = Math.round(order.salesTax);\r\n    order.serviceFee = Math.round(order.serviceFee);\r\n    const orderBusiness = props.businesses.filter(\r\n      (business) => order.businessId === business.id\r\n    );\r\n    order.businessName = orderBusiness[0].name;\r\n    return order;\r\n  });\r\n  formattedMappedOrders.sort((a, b) => {\r\n    const aDate = new Date(a.dateTime);\r\n    const bDate = new Date(b.dateTime);\r\n    return bDate.getTime() - aDate.getTime();\r\n  });\r\n  var csvData = formattedMappedOrders.map((order) => {\r\n    var orderData = [];\r\n    Object.values(order).map((key) => {\r\n      if (key instanceof OrderDrink) {\r\n        Object.values(key.orderDrink).map((drink) => {\r\n          const drinkString = String(drink.quantity) + \"x\" + \" \" + drink.name;\r\n          orderData.push(drinkString);\r\n        });\r\n      } else {\r\n        orderData.push(key);\r\n      }\r\n      return key;\r\n    });\r\n    return orderData;\r\n  });\r\n\r\n  // add row headers\r\n  csvData.unshift(\r\n    Object.keys(formattedMappedOrders[0]).map((key) =>\r\n      // if the key is \"id\" than we want to display an email label\r\n      key === \"_tipPercentage\"\r\n        ? \"Tip %\"\r\n        : toCapitalizedWords(\r\n            // the object keys are the objects private properties so we have to remove the underscores\r\n            key.replace(\"_\", \"\")\r\n          )\r\n    )\r\n  );\r\n  if (formattedMappedOrders) {\r\n    return (\r\n      <TableContainer>\r\n        <Paper className={props.classes.paper}>\r\n          <Row style={{ width: \"100%\", height: \"fit-content\" }}>\r\n            <Col xs={9}>\r\n              <Title style={{ marginLeft: \"auto\", maxWidth: \"15%\" }}>\r\n                Orders\r\n              </Title>\r\n            </Col>\r\n            <Col\r\n              xs={3}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"right\",\r\n                marginBottom: \"0.35em\",\r\n              }}\r\n            >\r\n              <CSVLink data={csvData} style={{ marginLeft: \"auto\" }}>\r\n                Export Data\r\n              </CSVLink>\r\n            </Col>\r\n          </Row>\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell align=\"left\" key={\"row #\"}>\r\n                  Row\r\n                </TableCell>\r\n                {Object.keys(formattedMappedOrders[0]).map((key, i) => (\r\n                  <TableCell align=\"left\" key={i}>\r\n                    {key === \"_tipPercentage\"\r\n                      ? \"Tip %\"\r\n                      : toCapitalizedWords(\r\n                          // the object keys are the objects private properties so we have to remove the underscores\r\n                          key.replace(\"_\", \"\")\r\n                        )}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {formattedMappedOrders.map((row, i) => (\r\n                <TableRow key={row.id}>\r\n                  <TableCell>{i}</TableCell>\r\n                  {Object.values(row).map((key, i) => {\r\n                    if (key instanceof OrderDrink) {\r\n                      return (\r\n                        <TableCell align=\"left\" key={i}>\r\n                          {Object.values(key.orderDrink).map((drink) => {\r\n                            return (\r\n                              String(drink.quantity) + \"x\" + \" \" + drink.name\r\n                            );\r\n                          })}\r\n                        </TableCell>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <TableCell align=\"left\" key={i}>\r\n                          {key}\r\n                        </TableCell>\r\n                      );\r\n                    }\r\n                  })}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n      </TableContainer>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n};\r\nexport default Orders;\r\n","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\listItems.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Businesses.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\HomeSplash.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Title.js",[],"C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Chart.js",["106"],"import { React, useReducer, useEffect } from \"react\";\r\nimport { useTheme, makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Label,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport Title from \"./Title\";\r\nimport { Order, Business } from \"../../Models\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { FormGroup } from \"@material-ui/core\";\r\nimport Sales from \"./Sales\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    width: \"fit-content\",\r\n  },\r\n  formButton: {\r\n    height: \"fit-content\",\r\n  },\r\n}));\r\nexport default function Chart(props) {\r\n  const theme = useTheme();\r\n  const [orderState, setOrderState] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      data: [],\r\n      sales: 0,\r\n      months: [],\r\n    }\r\n  );\r\n  // Generate Sales Data\r\n  const orders = props.orders.map((orderJSON) => {\r\n    return new Order(orderJSON);\r\n  });\r\n  const businesses = props.businesses.map((businessJSON) => {\r\n    return new Business(businessJSON);\r\n  });\r\n\r\n  const monthsLookup = [\r\n    \"january\",\r\n    \"february\",\r\n    \"march\",\r\n    \"april\",\r\n    \"may\",\r\n    \"june\",\r\n    \"july\",\r\n    \"august\",\r\n    \"september\",\r\n    \"october\",\r\n    \"november\",\r\n    \"december\",\r\n  ];\r\n  const weeks = [1, 2, 3, 4];\r\n\r\n  const years = [2021];\r\n  const intermediaryMonths = [];\r\n  const [formValue, setFormValue] = useReducer(\r\n    (state, newState) => ({ ...state, ...newState }),\r\n    {\r\n      business: \"all\",\r\n      week: \"all\",\r\n      month: \"all\",\r\n      year: years[0],\r\n      months: [],\r\n    }\r\n  );\r\n  const formChangeHandler = (event) => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    if (name === \"month\") {\r\n      // the month is changed we reset the week value to its default of all weeks\r\n      setFormValue({\r\n        [name]: value,\r\n        week: \"all\",\r\n      });\r\n    }\r\n    setFormValue({\r\n      [name]: value,\r\n    });\r\n  };\r\n  const createData = (order, dataGroupedByDate, month = false) => {\r\n    const dateWithYear = order.dateTime.split(\"/\");\r\n    const orderDay = dateWithYear[1];\r\n    const orderMonth = dateWithYear[0];\r\n    const date = orderMonth + \"/\" + orderDay;\r\n    const amount = order.cost;\r\n    const orderDateTime = new Date(order.dateTime);\r\n    const monthIndex = monthsLookup.indexOf(month);\r\n    const monthPresentIndex = intermediaryMonths.indexOf(\r\n      monthsLookup[orderDateTime.getMonth()]\r\n    );\r\n    const orderBusinessId = order.businessId;\r\n    const orderBusiness = businesses.filter(\r\n      (business) => business.id === orderBusinessId\r\n    )[0];\r\n\r\n    if (monthPresentIndex === -1) {\r\n      intermediaryMonths.push(monthsLookup[orderDateTime.getMonth()]);\r\n      intermediaryMonths.sort(function (a, b) {\r\n        return monthsLookup.indexOf(a) - monthsLookup.indexOf(b);\r\n      });\r\n    }\r\n    var filterBusiness = \"\";\r\n    // the first filtration will be done by business, because this will affect the normalization of the order dates\r\n    if (formValue.business !== \"all\") {\r\n      filterBusiness = new Business(formValue.business, true);\r\n      if (orderBusinessId !== filterBusiness.id) {\r\n        return;\r\n      }\r\n    }\r\n    if (month === false) {\r\n      // if no month is passed in then we sort the entire year's dates\r\n      if (!dataGroupedByDate.find((data) => data.date === date)) {\r\n        // if a matching date hasn't been added to the array then we append it to the list\r\n        dataGroupedByDate.push({\r\n          date: date,\r\n          dateTime: new Date(date),\r\n          amount: amount,\r\n          businessName: orderBusiness.name,\r\n          businessAddress: orderBusiness.address,\r\n        });\r\n      } else {\r\n        // otherwise if the date is already present, add the order value to the data object with the associated data and the running sum of costs for that date\r\n        dataGroupedByDate.find((data) => data.date === date).amount += amount;\r\n      }\r\n    } else if (monthIndex !== false) {\r\n      // if a month value was specified\r\n      if (\r\n        // if the monthIndex of the data is the same of the desired monthIndex\r\n        orderDateTime.getMonth() !== monthIndex\r\n      ) {\r\n        return;\r\n      }\r\n      if (\r\n        // if the date of the data is not present in the array yet\r\n        !dataGroupedByDate.find(\r\n          (data) => data.dateTime.getDate() === orderDateTime.getDate()\r\n        )\r\n      ) {\r\n        dataGroupedByDate.push({\r\n          date: date,\r\n          dateTime: new Date(date),\r\n          amount: amount,\r\n          businessName: orderBusiness.name,\r\n          businessAddress: orderBusiness.address,\r\n        });\r\n      } else {\r\n        // otherwise if the date is already present, add the order value to the data object with the associated data and the running sum of costs\r\n        dataGroupedByDate.find(\r\n          (data) => data.dateTime.getDate() === orderDateTime.getDate()\r\n        ).amount += amount;\r\n      }\r\n    }\r\n  };\r\n  const getFormattedDate = (date) => {\r\n    let month = (1 + date.getMonth()).toString().padStart(2, \"0\");\r\n    let day = date.getDate().toString().padStart(2, \"0\");\r\n    return month + \"/\" + day;\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const addMissingDates = (dateArray) => {\r\n    var copyOfDateArray = [...dateArray];\r\n    const lastday = (y, m) => {\r\n      return new Date(y, m + 1, 0).getDate();\r\n    };\r\n    const monthForSet = copyOfDateArray[\r\n      copyOfDateArray.length - 1\r\n    ].dateTime.getMonth();\r\n    const lastMonthDayForSet = lastday(2021, monthForSet);\r\n    for (var i = 0; i < copyOfDateArray.length - 1; i++) {\r\n      const currentIndexmonth = copyOfDateArray[i].dateTime.getMonth();\r\n      const nextIndexmonth = copyOfDateArray[i + 1].dateTime.getMonth();\r\n\r\n      var currentIndexDay = copyOfDateArray[i].dateTime.getDate();\r\n      var nextIndexDay = copyOfDateArray[i + 1].dateTime.getDate();\r\n      const lastMonthDay = lastday(2021, currentIndexmonth);\r\n\r\n      // check to make sure the first day of the month is 1\r\n      if (!currentIndexDay === 1) {\r\n        // if not prepend a new order for 0 dollars on the first day of the month, which will trigger the function to add all the days after that\r\n        const newDate = Date(2021, currentIndexmonth, 1).getDate();\r\n        copyOfDateArray.unshift({\r\n          date: getFormattedDate(newDate),\r\n          dateTime: newDate,\r\n          amount: 0,\r\n        });\r\n        i = 0; // reset index to 0 with the new element at the front of the list\r\n      } else {\r\n        // if we are only filtering one month of data then this will always be true\r\n        // if the next data value month is not the same as the first then we don't want to compare them for the purpose of filling in missing days with no orders, and we have also reached the end of the data for the current month\r\n        if (currentIndexmonth === nextIndexmonth) {\r\n          if (nextIndexDay - currentIndexDay !== 1) {\r\n            const newDate = copyOfDateArray[i].dateTime;\r\n            // get tomorrow's date\r\n            newDate.setDate(copyOfDateArray[i].dateTime.getDate() + 1);\r\n            // add an empty order to represent 0 sales on that date\r\n            copyOfDateArray.splice(i + 1, 0, {\r\n              date: getFormattedDate(newDate),\r\n              dateTime: newDate,\r\n              amount: 0,\r\n            });\r\n          }\r\n        } else {\r\n          // once we reach the end of the orders for the current month, which goes up until the last order was placed for that month, then we want to fill in any remaining missing orders up until the last day of that month\r\n          while (currentIndexDay !== lastMonthDay) {\r\n            var nextDay = new Date(copyOfDateArray[i].dateTime);\r\n            nextDay.setDate(nextDay.getDate() + 1);\r\n            copyOfDateArray.splice(i + 1, 0, {\r\n              date: getFormattedDate(nextDay),\r\n              dateTime: nextDay,\r\n              amount: 0,\r\n            });\r\n            i = i + 1;\r\n            currentIndexDay = copyOfDateArray[i].dateTime.getDate();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (formValue.month !== \"all\") {\r\n      // after completing the for loop we want to check if we were only filtering one month of data, if that is the case then we want to add the remaining days up until the end of the month\r\n      // if the value is only one month then when the for loop finishes we can add the missing dates\r\n      i = copyOfDateArray.length - 1;\r\n      while (lastMonthDayForSet !== copyOfDateArray[i].dateTime.getDate()) {\r\n        currentIndexDay = copyOfDateArray[i].dateTime.getDate();\r\n        nextDay = new Date(copyOfDateArray[i].dateTime);\r\n        nextDay.setDate(nextDay.getDate() + 1);\r\n        copyOfDateArray.push({\r\n          date: getFormattedDate(nextDay),\r\n          dateTime: nextDay,\r\n          amount: 0,\r\n        });\r\n        i = copyOfDateArray.length - 1;\r\n      }\r\n    }\r\n    return copyOfDateArray;\r\n  };\r\n  const getWeekDays = (dateArray) => {\r\n    var copyOfDateArray = [...dateArray];\r\n    var newWeekDateArray = [];\r\n\r\n    const oddDaysOut = copyOfDateArray.length % 4;\r\n    const weekLength = Math.floor(copyOfDateArray.length / 4);\r\n    const weekStartDay = weekLength * (formValue.week - 1);\r\n\r\n    var weekEndDay = weekStartDay + weekLength;\r\n    if (formValue.week === 4) {\r\n      weekEndDay = weekEndDay + oddDaysOut;\r\n    }\r\n    for (var i = 0; i < copyOfDateArray.length; i++) {\r\n      if (i >= weekStartDay && i <= weekEndDay) {\r\n        newWeekDateArray.push(copyOfDateArray[i]);\r\n      }\r\n    }\r\n    return newWeekDateArray;\r\n  };\r\n  const summateSales = (dateArray) => {\r\n    var sum = 0;\r\n    for (var i = 0; i < dateArray.length; i++) {\r\n      sum += dateArray[i].amount;\r\n    }\r\n    return sum;\r\n  };\r\n  const getTimeIntervalAndBusiness = () => {\r\n    var businessName = \"\";\r\n    if (formValue.business !== \"all\") {\r\n      const filterBusiness = new Business(formValue.business, true);\r\n      businessName = filterBusiness.name;\r\n      businessName += \" \";\r\n    }\r\n    if (formValue.month === \"all\") {\r\n      return businessName + \"Year\";\r\n    } else if (formValue.month !== \"all\" && formValue.week === \"all\") {\r\n      let monthNameFormat =\r\n        formValue.month.charAt(0).toUpperCase() + formValue.month.slice(1);\r\n      return businessName + \" \" + monthNameFormat;\r\n    } else if (formValue.month !== \"all\" && formValue.week !== \"all\") {\r\n      let monthNameFormat =\r\n        formValue.month.charAt(0).toUpperCase() + formValue.month.slice(1);\r\n      return (\r\n        businessName +\r\n        \" \" +\r\n        monthNameFormat +\r\n        \" \" +\r\n        \"Week\" +\r\n        \" \" +\r\n        formValue.week\r\n      );\r\n    }\r\n  };\r\n  const prepareData = () => {\r\n    var dataGroupedByDate = [];\r\n    if (formValue.month !== \"all\") {\r\n      // if a month has been specified\r\n      orders.map((order) =>\r\n        createData(order, dataGroupedByDate, formValue.month)\r\n      );\r\n      dataGroupedByDate.sort((a, b) => {\r\n        return a.dateTime.getTime() - b.dateTime.getTime();\r\n      });\r\n      const fullDateArray = addMissingDates(dataGroupedByDate);\r\n      if (formValue.week === \"all\") {\r\n        const salesSum = summateSales(fullDateArray);\r\n        const orderInformation = {\r\n          data: fullDateArray,\r\n          sales: salesSum,\r\n          months: intermediaryMonths,\r\n        };\r\n        setOrderState(orderInformation);\r\n      } else {\r\n        // if a week has been selected\r\n        const weekDays = getWeekDays(fullDateArray);\r\n        const salesSum = summateSales(weekDays);\r\n        const orderInformation = {\r\n          data: weekDays,\r\n          sales: salesSum,\r\n          months: intermediaryMonths,\r\n        };\r\n        setOrderState(orderInformation);\r\n      }\r\n    } else if (formValue.month === \"all\") {\r\n      // if a month has not been spcified we do year to date sales\r\n      orders.map((order) => createData(order, dataGroupedByDate));\r\n      dataGroupedByDate.sort((a, b) => {\r\n        return a.dateTime.getTime() - b.dateTime.getTime();\r\n      });\r\n\r\n      const fullDateArray = addMissingDates(dataGroupedByDate);\r\n      const salesSum = summateSales(fullDateArray);\r\n      const orderInformation = {\r\n        data: fullDateArray,\r\n        sales: salesSum,\r\n        months: intermediaryMonths,\r\n      };\r\n      setOrderState(orderInformation);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    prepareData(); // the formValue stateful variable is a dependency because the prepare data function relies on it to properly update the UI. because it is listed as a dependency react will make sure to get the updated values for it when the useEffect hook is called, which is whenever the page re-renders, which occurs when state changes which occures when the user selects a filter option\r\n  }, [formValue]);\r\n\r\n  return (\r\n    <>\r\n      <Title>Sales</Title>\r\n      <Form>\r\n        <FormGroup>\r\n          <Form.Row>\r\n            <Col xs={\"auto\"}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"business-select-label\">Business</InputLabel>\r\n                <Select\r\n                  labelId=\"business-select-label\"\r\n                  id=\"business-select-outlined\"\r\n                  value={formValue.business}\r\n                  className={classes.formButton}\r\n                  onChange={formChangeHandler}\r\n                  label=\"Business\"\r\n                  name=\"business\"\r\n                >\r\n                  <MenuItem value={\"all\"}>All Businesses</MenuItem>\r\n                  {businesses.map((business, i) => (\r\n                    <MenuItem key={i} value={JSON.stringify(business)}>\r\n                      {business.name}\r\n                      <br />\r\n                      {business.address}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Col>\r\n            <Col xs={\"auto\"}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"year-select-label\">Year</InputLabel>\r\n                <Select\r\n                  labelId=\"year-select-label\"\r\n                  id=\"year-select\"\r\n                  value={formValue.year}\r\n                  className={classes.formButton}\r\n                  onChange={formChangeHandler}\r\n                  label=\"Year\"\r\n                  name=\"year\"\r\n                >\r\n                  {years.map((year, i) => (\r\n                    <MenuItem key={i} value={year}>\r\n                      {year}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Col>\r\n            <Col xs={\"auto\"}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"month-select-label\">Month</InputLabel>\r\n                <Select\r\n                  labelId=\"month-select-label\"\r\n                  id=\"month-select\"\r\n                  value={formValue.month}\r\n                  className={classes.formButton}\r\n                  onChange={formChangeHandler}\r\n                  label=\"Month\"\r\n                  name=\"month\"\r\n                >\r\n                  <MenuItem value={\"all\"}>All months</MenuItem>\r\n\r\n                  {orderState.months.map((month, i) => (\r\n                    <MenuItem key={i} value={month}>\r\n                      {month.charAt(0).toUpperCase() + month.slice(1)}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Col>\r\n            <Col xs={\"auto\"}>\r\n              <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                <InputLabel id=\"week-select-label\">Week</InputLabel>\r\n                <Select\r\n                  labelId=\"week-select-label\"\r\n                  id=\"week-select\"\r\n                  value={formValue.week}\r\n                  className={classes.formButton}\r\n                  onChange={formChangeHandler}\r\n                  label=\"Week\"\r\n                  name=\"week\"\r\n                  disabled={formValue.month === \"all\" ? true : false}\r\n                >\r\n                  <MenuItem value={\"all\"}>All weeks</MenuItem>\r\n\r\n                  {weeks.map((week, i) => (\r\n                    <MenuItem key={i} value={week}>\r\n                      {week}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Col>\r\n            <Col xs={\"auto\"} style={{ marginLeft: \"auto\" }}>\r\n              <CSVLink data={orderState.data} style={{ marginLeft: \"auto\" }}>\r\n                Export Data\r\n              </CSVLink>\r\n            </Col>\r\n          </Form.Row>\r\n        </FormGroup>\r\n      </Form>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={orderState.data}\r\n          margin={{\r\n            top: 16,\r\n            right: 16,\r\n            bottom: 0,\r\n            left: 24,\r\n          }}\r\n        >\r\n          <XAxis dataKey=\"date\" stroke={theme.palette.text.secondary} dy={10} />\r\n          <YAxis stroke={theme.palette.text.secondary} dx={-5}>\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{ textAnchor: \"middle\", fill: theme.palette.text.primary }}\r\n            >\r\n              Sales ($)\r\n            </Label>\r\n          </YAxis>\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"amount\"\r\n            stroke={theme.palette.primary.main}\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n      <Divider\r\n        style={{\r\n          marginTop: \"3%\",\r\n          marginBottom: \"1%\",\r\n          backgroundColor: \"white\",\r\n          height: \".1rem\",\r\n        }}\r\n      />\r\n      <Sales\r\n        businessAndInterval={getTimeIntervalAndBusiness()}\r\n        sales={orderState.sales}\r\n      />\r\n      <Divider\r\n        style={{\r\n          marginTop: \"0%\",\r\n          marginBottom: \"3%\",\r\n          backgroundColor: \"white\",\r\n          height: \".1rem\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\pdriscoll002\\Documents\\Developer\\backend\\react-app\\src\\pages\\dashboard\\Sales.js",["107","108"],"import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Title from \"./Title\";\r\n\r\nexport default function Deposits(props) {\r\n  return (\r\n    <>\r\n      <Title>\r\n        {props.businessAndInterval === \"Year\"\r\n          ? props.businessAndInterval + \" \" + \"to Date Sales\"\r\n          : props.businessAndInterval + \" \" + \"Sales\"}\r\n      </Title>\r\n      <Typography component=\"p\" variant=\"h4\">\r\n        ${Math.round(props.sales)}\r\n      </Typography>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"109","severity":1,"message":"110","line":23,"column":11,"nodeType":"111","messageId":"112","endLine":23,"endColumn":17},{"ruleId":"113","severity":1,"message":"114","line":55,"column":51,"nodeType":"115","messageId":"116","endLine":55,"endColumn":53},{"ruleId":"117","severity":1,"message":"118","line":56,"column":60,"nodeType":"119","messageId":"120","endLine":56,"endColumn":61},{"ruleId":"117","severity":1,"message":"118","line":130,"column":60,"nodeType":"119","messageId":"120","endLine":130,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":353,"column":6,"nodeType":"123","endLine":353,"endColumn":17,"suggestions":"124"},{"ruleId":"117","severity":1,"message":"118","line":10,"column":45,"nodeType":"119","messageId":"120","endLine":10,"endColumn":46},{"ruleId":"117","severity":1,"message":"118","line":11,"column":45,"nodeType":"119","messageId":"120","endLine":11,"endColumn":46},"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prepareData'. Either include it or remove the dependency array.","ArrayExpression",["125"],{"desc":"126","fix":"127"},"Update the dependencies array to be: [formValue, prepareData]",{"range":"128","text":"129"},[13143,13154],"[formValue, prepareData]"]